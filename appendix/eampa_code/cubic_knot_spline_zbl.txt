SUBROUTINE cubic_knot_spline_5(r, p, p_fixed, y)
!############################################################
! p coefficients
! pf r cutoffs
! they must be the same size
IMPLICIT NONE
!############################################################
REAL(kind=DoubleReal), INTENT(IN) :: r
REAL(kind=DoubleReal), INTENT(IN) :: p(:)
REAL(kind=DoubleReal), INTENT(IN) :: p_fixed(:)
REAL(kind=DoubleReal), INTENT(OUT) :: y
!############################################################
INTEGER(kind=StandardInteger) ::n
REAL(kind=DoubleReal) :: nodes(1:(size(p,1)-2) / 3 + 2,1:4)
REAL(kind=DoubleReal) :: qa, qb, zbl_mult
INTEGER(kind=StandardInteger) :: psize, pfsize, node_count, pstride
LOGICAL :: complete
!############################################################
psize = SIZE(p, 1)
pfsize = SIZE(p_fixed, 1)
pstride = (size(p,1)-2) / 3
node_count = pstride + 2
nodes(:,:) = 0.0D0
nodes(2:node_count-1, 1) = p(1:pstride)
nodes(2:node_count-1, 2) = p(pstride+1:2*pstride)
nodes(2:node_count-1, 3) = p(2*pstride+1:3*pstride)

qa = p_fixed(1)
qb = p_fixed(2)
zbl_mult = p_fixed(3)
nodes(1, 1) = p_fixed(4)
nodes(1, 2) = p(3*pstride+1)
nodes(1, 3) = p(3*pstride+2)
nodes(node_count, 1) = p_fixed(5)
nodes(node_count, 2) =  p_fixed(6)
nodes(node_count, 3) =  p_fixed(7)

IF(r .LT. nodes(1, 1))THEN   
  y =  nodes(1, 2)
ELSE IF(r .GT. nodes(node_count, 1))THEN  
  y =  nodes(node_count, 2)
ELSE  
  ! Add ZBL
  y = y + 1.0D0 * f_zbl_ackland_mendelev(r, qa, qb) 
  
  ! IF EXACTLY A NODE
	complete = .FALSE.
	DO n = 1, node_count  
	 	IF(r .EQ. nodes(n,1))THEN      
	  	complete = .TRUE.
	  	y = y + nodes(n,2)
	 	END IF
	END DO
  
  IF(complete .EQV. .FALSE.)THEN
    y = y + f_cubic_knot_spline(r, nodes)
  END IF
END IF


END SUBROUTINE cubic_knot_spline_5


! VECTOR SUBROUTINE
SUBROUTINE cubic_knot_spline_5_v(r, p, p_fixed, y)
!############################################################
! PAIR SPLINE
IMPLICIT NONE
!############################################################
REAL(kind=DoubleReal), INTENT(IN) :: r(:)
REAL(kind=DoubleReal), INTENT(IN) :: p(:)
REAL(kind=DoubleReal), INTENT(IN) :: p_fixed(:)
REAL(kind=DoubleReal), INTENT(OUT) :: y(1:SIZE(r,1))
INTEGER(kind=StandardInteger) :: n
!############################################################
! Loop through all the values in r(:), calculate and store in y(:)
DO n = 1, SIZE(r,1)
  CALL cubic_knot_spline_5(r(n), p, p_fixed, y(n))
END DO
END SUBROUTINE cubic_knot_spline_5_v



FUNCTION f_cubic_knot_spline(r, nodes) RESULT (y)
!############################################################
REAL(kind=DoubleReal) :: r
REAL(kind=DoubleReal) :: nodes(:,:)
REAL(kind=DoubleReal) :: y
!############################################################
INTEGER(kind=StandardInteger) :: n, j
!############################################################

! FIND n, n+1 TO SPLINE BETWEEN
IF(r .LT. nodes(1,1))THEN
  n = 1    
ELSE IF(r .GT. nodes(SIZE(nodes,1), 1))THEN
  n = SIZE(nodes,1)  - 1  
ELSE
  DO n = 1, SIZE(nodes,1) - 1
    IF(r .GE. nodes(n, 1) .AND. r .LT. nodes(n+1, 1))THEN
      EXIT
    END IF
  END DO
END IF  
y = f_cubic_knot_ab(r, nodes(n, 1), nodes(n, 2), nodes(n, 3), nodes(n+1, 1), nodes(n+1, 2), nodes(n+1, 3))
END FUNCTION f_cubic_knot_spline


FUNCTION f_cubic_knot_ab(r, xa, ya, ypa, xb, yb, ypb) RESULT (y)
! CUBIC KNOT
IMPLICIT NONE
!############################################################
REAL(kind=DoubleReal) :: r
REAL(kind=DoubleReal) :: xa, ya, ypa, xb, yb, ypb
REAL(kind=DoubleReal) :: y
!############################################################
REAL(kind=DoubleReal) :: xmat(1:4,1:4)
REAL(kind=DoubleReal) :: xmat_inv(1:4,1:4)
REAL(kind=DoubleReal) :: ymat(1:4)
REAL(kind=DoubleReal) :: c(1:4)
!############################################################
xmat(1,1) = 1.0
xmat(1,2) = xa
xmat(1,3) = xa**2
xmat(1,4) = xa**3
xmat(2,1) = 1.0
xmat(2,2) = xb
xmat(2,3) = xb**2
xmat(2,4) = xb**3
xmat(3,1) = 0.0
xmat(3,2) = 1.0D0
xmat(3,3) = 2.0D0 * xa
xmat(3,4) = 3.0D0 * xa**2
xmat(4,1) = 0.0
xmat(4,2) = 1.0D0
xmat(4,3) = 2.0D0 * xb
xmat(4,4) = 3.0D0 * xb**2
    
ymat(1) = ya
ymat(2) = yb
ymat(3) = ypa
ymat(4) = ypb
    
!CALL sls_solve(xmat, ymat, c)
CALL minverse(xmat, xmat_inv, 4)
c = MATMUL(xmat_inv, ymat)
y = c(1) + c(2) * r + c(3) * r**2 + c(4) * r**3

END FUNCTION f_cubic_knot_ab


FUNCTION f_zbl_ackland_mendelev(r, q1, q2) RESULT (y)
!############################################################
! ZBL Development of an interatomic potential for phosphorus impurities in alpha-iron 2004
IMPLICIT NONE
!############################################################
REAL(kind=DoubleReal) :: q1, q2, r
REAL(kind=DoubleReal) :: y
!############################################################
REAL(kind=DoubleReal) :: rs, x, e
!############################################################
rs = 0.4683766D0 / (q1**(2.0D0/3.0D0) + q2**(2.0D0/3.0D0))
x = (r / rs)
e = 0.1818D0 * exp(-3.2 * x) + 0.5099D0 * exp(-0.9423 * x) + 0.2802D0 * exp(-0.4029 * x) + 0.02817D0 * exp(-0.2016 * x)
y = (q1 * q2 * e) / r
END FUNCTION f_zbl_ackland_mendelev

